from typing import Any, Dict, List

from pydantic import BaseModel, Field


class ManifestItem(BaseModel):
    name: str
    description: str
    arguments: str | None = None
    keywords: List[str] = Field(default_factory=list)
    file_path: str


class Action(BaseModel):
    tool_name: str = Field(
        description="The name of the tool/action to be executed."
    )
    arguments: dict = Field(
        description="The arguments for the tool, as a dictionary."
    )


class Thought(BaseModel):
    reasoning: str = Field(
        description="The agent's reasoning for choosing the current action."
    )
    criticism: str = Field(description="Self-criticism of the plan.")
    next_action: Action


class ReActStep(BaseModel):
    thought: Thought
    observation: str | None = None  # Result from the executed action


class PRPOutput(BaseModel):
    """JSON representation of a complete PR plan.

    This model defines the structure of the final planning document
    generated by the system. Instances of :class:`PRPOutput` are serialized
    directly to JSON and written to disk. Each field captures a critical
    aspect of the product requirement plan:

    * ``goal`` -- a concise statement of the feature or product objective.
    * ``why`` -- justification and expected business value of the work.
    * ``what`` -- a breakdown of the technical requirements and success
      criteria.
    * ``context`` -- assembled documentation references and code snippets
      that informed the plan.
    * ``implementation_blueprint`` -- ordered steps for implementing the
      feature.
    * ``validation_loop`` -- checks the agent will run to verify completion.

    The resulting JSON can be consumed by other tooling or viewed directly
    by engineers to understand the planned work.
    """
    goal: str = Field(description="The high-level goal of the PRP.")
    why: str = Field(description="The justification and business value.")
    what: Dict[str, Any] = Field(
        description="The technical requirements and success criteria."
    )
    context: Dict[str, Any] = Field(
        description=(
            "All assembled context, including documentation references and "
            "code patterns."
        )
    )
    implementation_blueprint: Dict[str, Any] = Field(
        description="The step-by-step implementation plan."
    )
    validation_loop: Dict[str, Any] = Field(
        description="The validation gates for the agent to use."
    )
